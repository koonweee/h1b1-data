### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type CaseStatusAndCount {
  caseStatus: casestatus!
  count: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Employer {
  city: String!
  count: Int!
  naicsCode: String!
  name: String!
  postalCode: String!
  state: String
  uuid: ID!
}

type LCADisclosure {
  beginDate: DateTime!
  caseNumber: ID!
  caseStatus: casestatus!
  decisionDate: DateTime!
  employer: Employer!
  fullTimePosition: Boolean!
  jobTitle: String
  prevailingWageRateOfPay: BigInt
  prevailingWageRateOfPayUnit: payunit
  receivedDate: DateTime!
  socCode: String!
  socJob: SOCJob!
  visaClass: visaclass!
  wageRateOfPayFrom: BigInt
  wageRateOfPayTo: BigInt
  wageRateOfPayUnit: payunit
  worksiteCity: String
  worksitePostalCode: String
  worksiteState: String
}

input LCADisclosureFilters {
  caseStatus: [casestatus!]
  employerUuid: [String!]
  visaClass: [visaclass!]
}

type LCADisclosures {
  hasNext: Boolean
  items: [LCADisclosure!]!
  totalCount: Int!
}

type PaginatedEmployer {
  hasNext: Boolean!
  items: [Employer!]!
}

type PaginatedLCADisclosuresUniqueColumnValues {
  """Unique case statuses in the result set for a given filter"""
  caseStatuses(
    """Filter options"""
    filters: LCADisclosureFilters
  ): UniqueCaseStatuses!

  """Unique employers in the result set for a given filter"""
  employers(
    """Search string for employer name"""
    employerNameSearchStr: String

    """Filter options"""
    filters: LCADisclosureFilters

    """Pagination options"""
    pagination: PaginationInput
  ): UniqueEmployers!

  """Unique visa classes in the result set for a given filter"""
  visaClasses(
    """Filter options"""
    filters: LCADisclosureFilters
  ): UniqueVisaClasses!
}

input PaginationInput {
  skip: Int
  take: Int
}

type Query {
  employers(
    caseStatuses: [casestatus!]
    searchStr: String

    """Number of records to skip"""
    skip: Int = 0

    """Number of records to take (max 500)"""
    take: Int = 50
    visaClasses: [visaclass!]
  ): PaginatedEmployer!
  lcaDisclosures(
    """Filter options"""
    filters: LCADisclosureFilters

    """Pagination options"""
    pagination: PaginationInput
  ): LCADisclosures!
  socJobs: [SOCJob!]!
  uniqueColumnValues: PaginatedLCADisclosuresUniqueColumnValues!
}

type SOCJob {
  code: ID!
  title: String!
}

type UniqueCaseStatuses {
  uniqueValues: [CaseStatusAndCount!]!
}

type UniqueEmployers {
  hasNext: Boolean
  uniqueValues: [Employer!]!
}

type UniqueVisaClasses {
  uniqueValues: [VisaClassAndCount!]!
}

type VisaClassAndCount {
  count: Int!
  visaClass: visaclass!
}

enum casestatus {
  Certified
  Certified___Withdrawn
  Denied
  Withdrawn
}

enum payunit {
  Bi_Weekly
  Hour
  Month
  Week
  Year
}

enum visaclass {
  E_3_Australian
  H_1B
  H_1B1_Chile
  H_1B1_Singapore
}